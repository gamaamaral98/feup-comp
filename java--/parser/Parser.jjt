options {
    LOOKAHEAD=1;
    MULTI=true;
}

PARSER_BEGIN(Parser)

import java.io.IOException;
import java.io.FileInputStream;

public class Parser{

    private static int errors = 0;


    public Parser() {
    }

    public static void error_skipto(ParseException e, String error, int kind) {
        System.out.println("ERROR: Syntatic Error on " + error + ". " + e.toString());
        Token t;
        do {
            t = getNextToken();
            if(t.kind == EOF)
                break;
        } while (t.kind != kind);
    }
}

PARSER_END(Parser)

SKIP :
{
    " " | "\t" | "\n" | "\r"
    /* Comments */
    | < "//" (~["\r", "\n"])* >
    | < "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/" >
}

TOKEN :
{
    < AND_OP : "&&" >
    | < LT_OP : "<" >
    | < PLUS_OP : "+" >
    | < MINUS_OP : "-" >
    | < TIMES_OP : "*" >
    | < DIVIDE_OP : "/" >
    | < NOT_OP : "!" >
    | < WHILE : "while" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < ASSIGN : "=" >
    | < LPAR : "(" >
    | < RPAR : ")" >
    | < DOT : "." >
    | < LENGTH : "length" >
    | < VIRG : "," >
    | < PVIRG : ";" >
    | < LCHAVETA : "{" >
    | < RCHAVETA : "}" >
    | < LPARRETO : "[" >
    | < RPARRETO : "]" >
    | < EXTENDS : "extends" >
    | < CLASS : "class" >
    | < PUBLIC : "public" >
    | < STATIC : "static" >
    | < VOID : "void" >
    | < MAIN : "main" >
    | < INT : "int" >
    | < INT_ARRAY : "int[]" >
    | < BOOLEAN : "boolean" >
    | < TRUE : "true" >
    | < FALSE : "false" >
    | < RETURN : "return" >
    | < THIS : "this" >
    | < NEW : "new" >
    | < STRING : "String" >
}

TOKEN :
{
    < INTEGER : (<DIGIT>)+ >
    | < IDENTIFIER : <LETTER> (<ALPHANUM>)* >

    | < #LETTER : [ "$", "A"-"Z", "_", "a"-"z" ] >
    | < #DIGIT : [ "0"-"9" ] >
    | < #ALPHANUM : <LETTER> | <DIGIT> >
}

SimpleNode Program() : {}
{
    try{
        ClassDeclaration(){
            return jjtThis;
        }
    } catch(ParseException e){
        System.out.println("Code Syntatic Error. " + e.toString());
    }
}

void ClassDeclaration() #void : {Token t;}
{   
    try{
        <CLASS> t=<IDENTIFIER> {jjtThis.name = t.image; jjtThis.line = t.beginLine; } #CLASS_NAME
    } catch(ParseException e){
        System.out.println("Syntatic Error on Class initialization. " + e.toString());
    }
    ClassDeclaration_1()
}

void ClassDeclaration_1() #void : {}
{
    ClassDeclaration_Not_Extends()
    | ClassDeclaration_Extends()   
}

void ClassDeclaration_Not_Extends() #CLASS(3) : {}
{
    try{
        <LCHAVETA>
    }catch(ParseException e){
        error_skipto(e, "Class declaration", LCHAVETA);
    }
    Vars()
    Methods()
    try{
        <RCHAVETA>
    }catch(ParseException e){
        error_skipto(e, "Class declaration", RCHAVETA);
    }
}

void ClassDeclaration_Extends() #CLASS_EXTENDS(4) : {Token t;}
{
    try{
        <EXTENDS> t=<IDENTIFIER> {jjtThis.name = t.image; jjtThis.line = t.beginLine;} #EXTENDED_CLASS <LCHAVETA>
    }catch(ParseException e){
        error_skipto(e, "Class declaration", LCHAVETA);
    }
    Vars()
    Methods()
    <RCHAVETA>
}

void Methods() #METHODS : {}
{
    ( <PUBLIC> ClassDeclaration_Methods() )*
}

void Vars() #VAR_DECLS : {}
{
    (VarDeclaration())*
}

void ClassDeclaration_Methods() #void : {}
{
    MainDeclaration()
    | MethodDeclaration()
}

void VarDeclaration() #VAR_DECL(2) : {Token t;}
{
    Type() t=<IDENTIFIER> {jjtThis.name = t.image; jjtThis.line = t.beginLine;} #IDENTIFIER <PVIRG>
}

void Vars_Statement() #METHOD_BODY : {}
{
    Vars_Statement_Aux()
    | {}
}

void Vars_Statement_Aux() #void : {Token t;}
{
    Type_1() t=<IDENTIFIER> {jjtThis.name = t.image; jjtThis.line = t.beginLine;} #IDENTIFIER <PVIRG> #VAR_DECL(2) Vars_Statement_Aux()
    | t=<IDENTIFIER> {jjtThis.name = t.image; jjtThis.line = t.beginLine;} #IDENTIFIER Vars_Statement_1()
    | Statement_Aux() (Statement())*
}

void Vars_Statement_1() #void : {Token t;}
{
    t=<IDENTIFIER> {jjtThis.name = t.image; jjtThis.line = t.beginLine;} #IDENTIFIER <PVIRG> #VAR_DECL(2) Vars_Statement_Aux()
    | Statement1() <PVIRG> (Statement())*
}

void MainDeclaration() #MAIN(2) : {Token t;}
{
    try{
        <STATIC> <VOID> <MAIN> <LPAR> <STRING> <LPARRETO> <RPARRETO> t=<IDENTIFIER> {jjtThis.name = t.image; jjtThis.line = t.beginLine;} #ARGV
        <RPAR> <LCHAVETA>
    }catch(ParseException e){
        error_skipto(e, "Main declaration", LCHAVETA);
    }
    Vars_Statement()
    try{
        <RCHAVETA>
    }catch(ParseException e){
        System.out.println("Missing } in Main Declaration." + e.toString());
    }
}

void MethodDeclaration() #METHOD(5) : {Token t;}
{
    Type() t=<IDENTIFIER> {jjtThis.name = t.image; jjtThis.line = t.beginLine;} #NAME <LPAR>
    MethodDeclaration_Args()
    <RPAR> <LCHAVETA>
    Vars_Statement()
    Method_Return()
}

void Method_Return() #RETURN_EXPRESSION : {}
{
    <RETURN> Expression() <PVIRG> <RCHAVETA>
}

void MethodDeclaration_Args() #METHOD_ARGS : {Token t1, t2;}
{
    (
        Type() (t1=<IDENTIFIER> {jjtThis.name = t1.image; jjtThis.line = t1.beginLine;} #IDENTIFIER) #ARG(2)
        ( <VIRG> Type() (t2=<IDENTIFIER> {jjtThis.name = t2.image; jjtThis.line = t2.beginLine;} #IDENTIFIER) #ARG(2) )*
    )?
}

void Type() #void : {Token t;}
{
    Type_1()
    | t=<IDENTIFIER> {jjtThis.name = t.image; jjtThis.line = t.beginLine;} #IDENTIFIER
}

void Type_1() #void : {}
{
    <INT> #INT
    | <INT_ARRAY> #INT_ARRAY
    | <BOOLEAN> #BOOLEAN
}

void Statement() #void : {Token t;}
{
    Multiple_Statements()
    | If_Else_Statement()
    | While_Statement()
    | t=<IDENTIFIER> {jjtThis.name = t.image; jjtThis.line = t.beginLine;} #IDENTIFIER Statement1() <PVIRG>
}

void Statement_Aux() #void : {}
{
    Multiple_Statements()
    | If_Else_Statement()
    | While_Statement()
}

void Multiple_Statements() #STATEMENT_LIST : {}
{
    <LCHAVETA> (Statement())* <RCHAVETA>
}

void If_Else_Statement() #IF_ELSE_STATEMENT(3) : {}
{
    try{
        <IF> <LPAR> Statement_COND() <RPAR>
    }catch(ParseException e){
        error_skipto(e, "IF statement declaration", RPAR);
    }
    If_Else_Statement_IF()
    try{
        <ELSE>
    } catch(ParseException e){
        System.out.println("Missing ELSE in IF_ELSE Statement." + e.toString());
    }
    If_Else_Statement_ELSE()
}

void Statement_COND() #CONDITION : {}
{
    Expression()
}

void If_Else_Statement_IF() #IF_BODY : {}
{
    Statement()
}

void If_Else_Statement_ELSE() #ELSE_BODY : {}
{
    Statement()
}

void While_Statement() #WHILE(2) : {}
{
    try{
        <WHILE> <LPAR> Statement_COND() <RPAR>
    }
    catch (ParseException e) {
        errors++;
        if(errors > 10){
            System.out.println("Maximum number of errors allowed");
            throw e; 
        }
        error_skipto(e, "WHILE statement declaration", RPAR);
    }
    While_Statement_BODY()
}

void While_Statement_BODY() #WHILE_BODY : {}
{
    Statement()
}

void Statement1() #void : {}
{
    Expression_No_Identifier()
    | Operator_5_DOT() (Operator_5())*
    | <ASSIGN> Expression() #ASSIGN(2)
    | <LPARRETO> Expression() <RPARRETO> #ACCESS_ARRAY(2) Statement2() 
}

void Statement2() #void : {}
{
    <ASSIGN> Expression() #ASSIGN_ARRAY(2)
    | (Operator_5())*
}

void Expression() #void : {}
{
    Expression1() (Operator_1())*
}

void Expression_No_Identifier() #void : {}
{
    Term_Literal() (Operator_4())* (Operator_3())* (Operator_2())* (Operator_1())*
}

void Expression1() #void : {}
{
    Expression2() (Operator_2())*
}

void Expression2() #void : {}
{
    Expression3() (Operator_3())*
}

void Expression3() #void : {}
{
    Term() (Operator_4())*
}

void Term() #void : {}
{
    Term_Literal()
    | Term_Identifier()
}

void Term_Literal() #void : {Token t;}
{
    t=<INTEGER> {jjtThis.valueInt = t.image;} #INT(0) (Operator_5())*
    | t=<TRUE> {jjtThis.valueBoolean = t.image;} #TRUE(0) (Operator_5())*
    | t=<FALSE> {jjtThis.valueBoolean = t.image;} #FALSE(0) (Operator_5())*
    | <THIS> #THIS(0) (Operator_5())*
    | <LPAR> Expression() <RPAR> (Operator_5())*
    | Term_NEW() (Operator_5())*
    | Term_NOT()
}

void Term_Identifier() #void : {Token t;}
{
    t=<IDENTIFIER> {jjtThis.name = t.image; jjtThis.line = t.beginLine;} #IDENTIFIER(0) (Operator_5())*
}

void Term_NOT() #NOT(1) : {}
{
    <NOT_OP> Term()
}

void Term_NEW() #void : {}
{
    <NEW> Term_NEW_1()
}

void Term_NEW_1() #void : {Token t;}
{
    <INT> <LPARRETO> Expression() <RPARRETO> #NEW_INT_ARRAY(1)
    | t=<IDENTIFIER> {jjtThis.name = t.image; jjtThis.line = t.beginLine;}  #CLASS <LPAR> <RPAR> #NEW_CLASS(1)
}

void Operator_1() #AND(2) : {}
{
    <AND_OP> Expression1()
}

void Operator_2() #LT(2) : {}
{
    <LT_OP> Expression2()
}

void Operator_3() #void : {}
{
    <PLUS_OP> Expression3() #ADD(2)
    | <MINUS_OP> Expression3() #SUB(2)
}

void Operator_4() #void : {}
{
    <TIMES_OP> Term() #MUL(2)
    | <DIVIDE_OP> Term() #DIV(2)
}

void Operator_5() #void : {}
{
    Operator_5_ARRAY()
    | Operator_5_DOT()
}

void Operator_5_ARRAY() #ACCESS_ARRAY(2) : {}
{
    <LPARRETO> Expression() <RPARRETO>
}

void Operator_5_DOT() #void : {}
{
    <DOT> Operator_5_DOT_1()
}

void Operator_5_DOT_1() #void : {Token t;}
{
    <LENGTH> #LENGTH(1)
    | t=<IDENTIFIER> {jjtThis.name = t.image; jjtThis.line = t.beginLine;}  #FUNCTION <LPAR> Operator_5_Call_Args() <RPAR> #CALL_FUNCTION(3)
}

void Operator_5_Call_Args() #CALL_ARGUMENTS : {}
{
    (
        Expression() (
            <VIRG> Expression()
        )*
    )?
} 