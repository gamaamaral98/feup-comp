/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*/options {
    LOOKAHEAD=1;
               
}

PARSER_BEGIN(Parser)

package parser;

import java.io.IOException;
import java.io.FileInputStream;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/

    private static int errors = 0;


    public Parser() {
    }

    public static void error_skipto(ParseException e, String error, int kind) {
        System.out.println("ERROR: Syntatic Error on " + error + ". " + e.toString());
        Token t;
        do {
            t = getNextToken();
            if(t.kind == EOF)
                break;
        } while (t.kind != kind);
    }
}

PARSER_END(Parser)

SKIP :
{
    " " | "\t" | "\n" | "\r"
    /* Comments */
    | < "//" (~["\r", "\n"])* >
    | < "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/" >
}

TOKEN :
{
    < AND_OP : "&&" >
    | < LT_OP : "<" >
    | < PLUS_OP : "+" >
    | < MINUS_OP : "-" >
    | < TIMES_OP : "*" >
    | < DIVIDE_OP : "/" >
    | < NOT_OP : "!" >
    | < WHILE : "while" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < ASSIGN : "=" >
    | < LPAR : "(" >
    | < RPAR : ")" >
    | < DOT : "." >
    | < LENGTH : "length" >
    | < VIRG : "," >
    | < PVIRG : ";" >
    | < LCHAVETA : "{" >
    | < RCHAVETA : "}" >
    | < LPARRETO : "[" >
    | < RPARRETO : "]" >
    | < EXTENDS : "extends" >
    | < CLASS : "class" >
    | < PUBLIC : "public" >
    | < STATIC : "static" >
    | < VOID : "void" >
    | < MAIN : "main" >
    | < INT : "int" >
    | < INT_ARRAY : "int[]" >
    | < BOOLEAN : "boolean" >
    | < TRUE : "true" >
    | < FALSE : "false" >
    | < RETURN : "return" >
    | < THIS : "this" >
    | < NEW : "new" >
    | < STRING : "String" >
}

TOKEN :
{
    < INTEGER : (<DIGIT>)+ >
    | < IDENTIFIER : <LETTER> (<ALPHANUM>)* >

    | < #LETTER : [ "$", "A"-"Z", "_", "a"-"z" ] >
    | < #DIGIT : [ "0"-"9" ] >
    | < #ALPHANUM : <LETTER> | <DIGIT> >
}

SimpleNode Program() : {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    try{
        ClassDeclaration(){
            return jjtn000;
        }
    } catch(ParseException e){
        System.out.println("Code Syntatic Error. " + e.toString());
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ClassDeclaration()       : {Token t;}
{   
    try{
        <CLASS> t=<IDENTIFIER>/*@bgen(jjtree) CLASS_NAME */
                               {
                                 ASTCLASS_NAME jjtn001 = new ASTCLASS_NAME(JJTCLASS_NAME);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*//*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn001, true);
                                 jjtc001 = false;
                               }
/*@egen*/ {jjtn001.name = t.image; jjtn001.line = t.beginLine; }/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001, true);
                                 }
                               }
/*@egen*/            
    } catch(ParseException e){
        System.out.println("Syntatic Error on Class initialization. " + e.toString());
    }
    ClassDeclaration_1()
}

void ClassDeclaration_1()       : {}
{
    ClassDeclaration_Not_Extends()
    | ClassDeclaration_Extends()   
}

void ClassDeclaration_Not_Extends()           : {/*@bgen(jjtree) #CLASS( 3) */
  ASTCLASS jjtn000 = new ASTCLASS(JJTCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #CLASS( 3) */
    try {
/*@egen*/
    try{
        <LCHAVETA>
    }catch(ParseException e){
        error_skipto(e, "Class declaration", LCHAVETA);
    }
    Vars()
    Methods()
    try{
        <RCHAVETA>
    }catch(ParseException e){
        error_skipto(e, "Class declaration", RCHAVETA);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  3);
      }
    }
/*@egen*/
}

void ClassDeclaration_Extends()                   : {/*@bgen(jjtree) #CLASS_EXTENDS( 4) */
                                                     ASTCLASS_EXTENDS jjtn000 = new ASTCLASS_EXTENDS(JJTCLASS_EXTENDS);
                                                     boolean jjtc000 = true;
                                                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) #CLASS_EXTENDS( 4) */
    try {
/*@egen*/
    try{
        <EXTENDS> t=<IDENTIFIER>/*@bgen(jjtree) EXTENDED_CLASS */
                                 {
                                   ASTEXTENDED_CLASS jjtn001 = new ASTEXTENDED_CLASS(JJTEXTENDED_CLASS);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                 }
                                 try {
/*@egen*//*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn001, true);
                                   jjtc001 = false;
                                 }
/*@egen*/ {jjtn001.name = t.image; jjtn001.line = t.beginLine;}/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001, true);
                                   }
                                 }
/*@egen*/                 <LCHAVETA>
    }catch(ParseException e){
        error_skipto(e, "Class declaration", LCHAVETA);
    }
    Vars()
    Methods()
    <RCHAVETA>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  4);
      }
    }
/*@egen*/
}

void Methods()          : {/*@bgen(jjtree) METHODS */
  ASTMETHODS jjtn000 = new ASTMETHODS(JJTMETHODS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) METHODS */
    try {
/*@egen*/
    ( <PUBLIC> ClassDeclaration_Methods() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Vars()            : {/*@bgen(jjtree) VAR_DECLS */
  ASTVAR_DECLS jjtn000 = new ASTVAR_DECLS(JJTVAR_DECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VAR_DECLS */
    try {
/*@egen*/
    (VarDeclaration())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ClassDeclaration_Methods()       : {}
{
    MainDeclaration()
    | MethodDeclaration()
}

void VarDeclaration()              : {/*@bgen(jjtree) #VAR_DECL( 2) */
                                      ASTVAR_DECL jjtn000 = new ASTVAR_DECL(JJTVAR_DECL);
                                      boolean jjtc000 = true;
                                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) #VAR_DECL( 2) */
    try {
/*@egen*/
    Type() t=<IDENTIFIER>/*@bgen(jjtree) IDENTIFIER */
                          {
                            ASTIDENTIFIER jjtn001 = new ASTIDENTIFIER(JJTIDENTIFIER);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtc001 = false;
                          }
/*@egen*/ {jjtn001.name = t.image; jjtn001.line = t.beginLine;}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
                          }
/*@egen*/             <PVIRG>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}

void Vars_Statement()              : {/*@bgen(jjtree) METHOD_BODY */
  ASTMETHOD_BODY jjtn000 = new ASTMETHOD_BODY(JJTMETHOD_BODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) METHOD_BODY */
    try {
/*@egen*/
    Vars_Statement_Aux()
    |/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/ {}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Vars_Statement_Aux()       : {Token t;}
{
    Type_1() t=<IDENTIFIER>/*@bgen(jjtree) IDENTIFIER */
                            {
                              ASTIDENTIFIER jjtn001 = new ASTIDENTIFIER(JJTIDENTIFIER);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn001, true);
                              jjtc001 = false;
                            }
/*@egen*/ {jjtn001.name = t.image; jjtn001.line = t.beginLine;}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
                            }
/*@egen*/            /*@bgen(jjtree) #VAR_DECL( 2) */
                                                                                              {
                                                                                                ASTVAR_DECL jjtn002 = new ASTVAR_DECL(JJTVAR_DECL);
                                                                                                boolean jjtc002 = true;
                                                                                                jjtree.openNodeScope(jjtn002);
                                                                                              }
                                                                                              try {
/*@egen*/ <PVIRG>/*@bgen(jjtree)*/
                                                                                              } finally {
                                                                                                if (jjtc002) {
                                                                                                  jjtree.closeNodeScope(jjtn002,  2);
                                                                                                }
                                                                                              }
/*@egen*/              Vars_Statement_Aux()
    | t=<IDENTIFIER>/*@bgen(jjtree) IDENTIFIER */
                     {
                       ASTIDENTIFIER jjtn003 = new ASTIDENTIFIER(JJTIDENTIFIER);
                       boolean jjtc003 = true;
                       jjtree.openNodeScope(jjtn003);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn003, true);
                       jjtc003 = false;
                     }
/*@egen*/ {jjtn003.name = t.image; jjtn003.line = t.beginLine;}/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc003) {
                         jjtree.closeNodeScope(jjtn003, true);
                       }
                     }
/*@egen*/             Vars_Statement_1()
    | Statement_Aux() (Statement())*
    | {}
}

void Vars_Statement_1()       : {Token t;}
{
    t=<IDENTIFIER>/*@bgen(jjtree) IDENTIFIER */
                   {
                     ASTIDENTIFIER jjtn001 = new ASTIDENTIFIER(JJTIDENTIFIER);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                   }
/*@egen*/ {jjtn001.name = t.image; jjtn001.line = t.beginLine;}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
                   }
/*@egen*/            /*@bgen(jjtree) #VAR_DECL( 2) */
                                                                                     {
                                                                                       ASTVAR_DECL jjtn002 = new ASTVAR_DECL(JJTVAR_DECL);
                                                                                       boolean jjtc002 = true;
                                                                                       jjtree.openNodeScope(jjtn002);
                                                                                     }
                                                                                     try {
/*@egen*/ <PVIRG>/*@bgen(jjtree)*/
                                                                                     } finally {
                                                                                       if (jjtc002) {
                                                                                         jjtree.closeNodeScope(jjtn002,  2);
                                                                                       }
                                                                                     }
/*@egen*/              Vars_Statement_Aux()
    | Statement1() <PVIRG> (Statement())*
}

void MainDeclaration()          : {/*@bgen(jjtree) #MAIN( 2) */
                                   ASTMAIN jjtn000 = new ASTMAIN(JJTMAIN);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) #MAIN( 2) */
    try {
/*@egen*/
    try{
        <STATIC> <VOID> <MAIN> <LPAR> <STRING> <LPARRETO> <RPARRETO> t=<IDENTIFIER>/*@bgen(jjtree) ARGV */
                                                                                    {
                                                                                      ASTARGV jjtn001 = new ASTARGV(JJTARGV);
                                                                                      boolean jjtc001 = true;
                                                                                      jjtree.openNodeScope(jjtn001);
                                                                                    }
                                                                                    try {
/*@egen*//*@bgen(jjtree)*/
                                                                                    {
                                                                                      jjtree.closeNodeScope(jjtn001, true);
                                                                                      jjtc001 = false;
                                                                                    }
/*@egen*/ {jjtn001.name = t.image; jjtn001.line = t.beginLine;}/*@bgen(jjtree)*/
                                                                                    } finally {
                                                                                      if (jjtc001) {
                                                                                        jjtree.closeNodeScope(jjtn001, true);
                                                                                      }
                                                                                    }
/*@egen*/      
        <RPAR> <LCHAVETA>
    }catch(ParseException e){
        error_skipto(e, "Main declaration", LCHAVETA);
    }
    Vars_Statement()
    try{
        <RCHAVETA>
    }catch(ParseException e){
        System.out.println("Missing } in Main Declaration." + e.toString());
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}

void MethodDeclaration()            : {/*@bgen(jjtree) #METHOD( 5) */
                                       ASTMETHOD jjtn000 = new ASTMETHOD(JJTMETHOD);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) #METHOD( 5) */
    try {
/*@egen*/
    Type() t=<IDENTIFIER>/*@bgen(jjtree) NAME */
                          {
                            ASTNAME jjtn001 = new ASTNAME(JJTNAME);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtc001 = false;
                          }
/*@egen*/ {jjtn001.name = t.image; jjtn001.line = t.beginLine;}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
                          }
/*@egen*/       <LPAR>
    MethodDeclaration_Args()
    <RPAR> <LCHAVETA>
    Vars_Statement()
    Method_Return()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  5);
      }
    }
/*@egen*/
}

void Method_Return()                    : {/*@bgen(jjtree) RETURN_EXPRESSION */
                                           ASTRETURN_EXPRESSION jjtn000 = new ASTRETURN_EXPRESSION(JJTRETURN_EXPRESSION);
                                           boolean jjtc000 = true;
                                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) RETURN_EXPRESSION */
    try {
/*@egen*/
    t=<RETURN> {jjtn000.line = t.beginLine;} Expression() <PVIRG> <RCHAVETA>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodDeclaration_Args()              : {/*@bgen(jjtree) METHOD_ARGS */
                                              ASTMETHOD_ARGS jjtn000 = new ASTMETHOD_ARGS(JJTMETHOD_ARGS);
                                              boolean jjtc000 = true;
                                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) METHOD_ARGS */
    try {
/*@egen*/
    (
        Type()/*@bgen(jjtree) #ARG( 2) */
               {
                 ASTARG jjtn002 = new ASTARG(JJTARG);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
               }
               try {
/*@egen*/ (t1=<IDENTIFIER>/*@bgen(jjtree) IDENTIFIER */
                                {
                                  ASTIDENTIFIER jjtn001 = new ASTIDENTIFIER(JJTIDENTIFIER);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                }
                                try {
/*@egen*//*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn001, true);
                                  jjtc001 = false;
                                }
/*@egen*/ {jjtn001.name = t1.image; jjtn001.line = t1.beginLine;}/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                  }
                                }
/*@egen*/            )/*@bgen(jjtree)*/
               } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002,  2);
                 }
               }
/*@egen*/        
        ( <VIRG> Type()/*@bgen(jjtree) #ARG( 2) */
                        {
                          ASTARG jjtn004 = new ASTARG(JJTARG);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
                        }
                        try {
/*@egen*/ (t2=<IDENTIFIER>/*@bgen(jjtree) IDENTIFIER */
                                         {
                                           ASTIDENTIFIER jjtn003 = new ASTIDENTIFIER(JJTIDENTIFIER);
                                           boolean jjtc003 = true;
                                           jjtree.openNodeScope(jjtn003);
                                         }
                                         try {
/*@egen*//*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn003, true);
                                           jjtc003 = false;
                                         }
/*@egen*/ {jjtn003.name = t2.image; jjtn003.line = t2.beginLine;}/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc003) {
                                             jjtree.closeNodeScope(jjtn003, true);
                                           }
                                         }
/*@egen*/            )/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004,  2);
                          }
                        }
/*@egen*/         )*
    )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Type()       : {Token t;}
{
    Type_1()
    | t=<IDENTIFIER>/*@bgen(jjtree) IDENTIFIER */
                     {
                       ASTIDENTIFIER jjtn001 = new ASTIDENTIFIER(JJTIDENTIFIER);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn001, true);
                       jjtc001 = false;
                     }
/*@egen*/ {jjtn001.name = t.image; jjtn001.line = t.beginLine;}/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                       }
                     }
/*@egen*/            
}

void Type_1()       : {Token t1; Token t2; Token t3;}
{
    t1=<INT>/*@bgen(jjtree) INT */
             {
               ASTINT jjtn001 = new ASTINT(JJTINT);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn001, true);
               jjtc001 = false;
             }
/*@egen*/ {jjtn001.line = t1.beginLine;}/*@bgen(jjtree)*/
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
             }
/*@egen*/     
    | t2=<INT_ARRAY>/*@bgen(jjtree) INT_ARRAY */
                     {
                       ASTINT_ARRAY jjtn002 = new ASTINT_ARRAY(JJTINT_ARRAY);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn002, true);
                       jjtc002 = false;
                     }
/*@egen*/ {jjtn002.line = t2.beginLine;}/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002, true);
                       }
                     }
/*@egen*/           
    | t3=<BOOLEAN>/*@bgen(jjtree) BOOLEAN */
                   {
                     ASTBOOLEAN jjtn003 = new ASTBOOLEAN(JJTBOOLEAN);
                     boolean jjtc003 = true;
                     jjtree.openNodeScope(jjtn003);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn003, true);
                     jjtc003 = false;
                   }
/*@egen*/ {jjtn003.line = t3.beginLine;}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc003) {
                       jjtree.closeNodeScope(jjtn003, true);
                     }
                   }
/*@egen*/         
}

void Statement()       : {Token t;}
{
    Multiple_Statements()
    | If_Else_Statement()
    | While_Statement()
    | Expression_No_Identifier() <PVIRG>
    | t=<IDENTIFIER>/*@bgen(jjtree) IDENTIFIER */
                     {
                       ASTIDENTIFIER jjtn001 = new ASTIDENTIFIER(JJTIDENTIFIER);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn001, true);
                       jjtc001 = false;
                     }
/*@egen*/ {jjtn001.name = t.image; jjtn001.line = t.beginLine;}/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                       }
                     }
/*@egen*/             Statement1() <PVIRG>
}

void Statement_Aux()       : {}
{
    Multiple_Statements()
    | If_Else_Statement()
    | While_Statement()
    | Expression_No_Identifier() <PVIRG>
}

void Multiple_Statements()                 : {/*@bgen(jjtree) STATEMENT_LIST */
  ASTSTATEMENT_LIST jjtn000 = new ASTSTATEMENT_LIST(JJTSTATEMENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) STATEMENT_LIST */
    try {
/*@egen*/
    <LCHAVETA> (Statement())* <RCHAVETA>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void If_Else_Statement()                       : {/*@bgen(jjtree) #IF_ELSE_STATEMENT( 3) */
                                                  ASTIF_ELSE_STATEMENT jjtn000 = new ASTIF_ELSE_STATEMENT(JJTIF_ELSE_STATEMENT);
                                                  boolean jjtc000 = true;
                                                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) #IF_ELSE_STATEMENT( 3) */
    try {
/*@egen*/
    <IF> t=<LPAR> {jjtn000.name = t.image; jjtn000.line = t.beginLine;} Statement_COND() <RPAR>
    If_Else_Statement_IF()
    <ELSE>
    If_Else_Statement_ELSE()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  3);
      }
    }
/*@egen*/
}

void Statement_COND()            : {/*@bgen(jjtree) CONDITION */
  ASTCONDITION jjtn000 = new ASTCONDITION(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CONDITION */
    try {
/*@egen*/
    Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void If_Else_Statement_IF()          : {/*@bgen(jjtree) IF_BODY */
  ASTIF_BODY jjtn000 = new ASTIF_BODY(JJTIF_BODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IF_BODY */
    try {
/*@egen*/
    Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void If_Else_Statement_ELSE()            : {/*@bgen(jjtree) ELSE_BODY */
  ASTELSE_BODY jjtn000 = new ASTELSE_BODY(JJTELSE_BODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ELSE_BODY */
    try {
/*@egen*/
    Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void While_Statement()           : {/*@bgen(jjtree) #WHILE( 2) */
                                    ASTWHILE jjtn000 = new ASTWHILE(JJTWHILE);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) #WHILE( 2) */
    try {
/*@egen*/
    try{
        <WHILE> t=<LPAR> {jjtn000.name = t.image; jjtn000.line = t.beginLine;} Statement_COND() <RPAR>
    }
    catch (ParseException e) {
        errors++;
        if(errors > 10){
            System.out.println("Maximum number of errors allowed");
            throw e; 
        }
        error_skipto(e, "WHILE statement declaration", RPAR);
    }
    While_Statement_BODY()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}

void While_Statement_BODY()             : {/*@bgen(jjtree) WHILE_BODY */
  ASTWHILE_BODY jjtn000 = new ASTWHILE_BODY(JJTWHILE_BODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WHILE_BODY */
    try {
/*@egen*/
    Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Statement1()       : {}
{
    Expression_No_Identifier()
    | Operator_5_DOT() (Operator_5())*
    | <ASSIGN>/*@bgen(jjtree) #ASSIGN( 2) */
               {
                 ASTASSIGN jjtn001 = new ASTASSIGN(JJTASSIGN);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
               }
/*@egen*/           
    | <LPARRETO> Expression()/*@bgen(jjtree) #ACCESS_ARRAY( 2) */
                              {
                                ASTACCESS_ARRAY jjtn002 = new ASTACCESS_ARRAY(JJTACCESS_ARRAY);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
                              }
                              try {
/*@egen*/ <RPARRETO>/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002,  2);
                                }
                              }
/*@egen*/                  Statement2() 
    | (Operator_4())* (Operator_3())* (Operator_2())* (Operator_1())*
}

void Statement2()       : {}
{
    <ASSIGN>/*@bgen(jjtree) #ASSIGN_ARRAY( 2) */
             {
               ASTASSIGN_ARRAY jjtn001 = new ASTASSIGN_ARRAY(JJTASSIGN_ARRAY);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
               }
             }
/*@egen*/                 
    | (Operator_5())*
}

void Expression()       : {}
{
    Expression1() (Operator_1())*
}

void Expression_No_Identifier()       : {}
{
    Term_Literal() (Operator_4())* (Operator_3())* (Operator_2())* (Operator_1())*
}

void Expression1()       : {}
{
    Expression2() (Operator_2())*
}

void Expression2()       : {}
{
    Expression3() (Operator_3())*
}

void Expression3()       : {}
{
    Term() (Operator_4())*
}

void Term()       : {}
{
    Term_Literal()
    | Term_Identifier()
}

void Term_Literal()       : {Token t;}
{
    t=<INTEGER>/*@bgen(jjtree) #INT( 0) */
                {
                  ASTINT jjtn001 = new ASTINT(JJTINT);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  0);
                  jjtc001 = false;
                }
/*@egen*/ {jjtn001.valueInt = t.image; jjtn001.line = t.beginLine;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  0);
                  }
                }
/*@egen*/         (Operator_5())*
    | t=<TRUE>/*@bgen(jjtree) #TRUE( 0) */
               {
                 ASTTRUE jjtn002 = new ASTTRUE(JJTTRUE);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
               }
               try {
/*@egen*//*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn002,  0);
                 jjtc002 = false;
               }
/*@egen*/ {jjtn002.valueBoolean = t.image; jjtn002.line = t.beginLine;}/*@bgen(jjtree)*/
               } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002,  0);
                 }
               }
/*@egen*/          (Operator_5())*
    | t=<FALSE>/*@bgen(jjtree) #FALSE( 0) */
                {
                  ASTFALSE jjtn003 = new ASTFALSE(JJTFALSE);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn003,  0);
                  jjtc003 = false;
                }
/*@egen*/ {jjtn003.valueBoolean = t.image; jjtn003.line = t.beginLine;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  0);
                  }
                }
/*@egen*/           (Operator_5())*
    |/*@bgen(jjtree) #THIS( 0) */
      {
        ASTTHIS jjtn004 = new ASTTHIS(JJTTHIS);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      }
      try {
/*@egen*/ <THIS>/*@bgen(jjtree)*/
      } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004,  0);
        }
      }
/*@egen*/          (Operator_5())*
    | <LPAR> Expression() <RPAR> (Operator_5())*
    | Term_NEW() (Operator_5())*
    | Term_NOT()
}

void Term_Identifier()       : {Token t;}
{
    t=<IDENTIFIER>/*@bgen(jjtree) #IDENTIFIER( 0) */
                   {
                     ASTIDENTIFIER jjtn001 = new ASTIDENTIFIER(JJTIDENTIFIER);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001,  0);
                     jjtc001 = false;
                   }
/*@egen*/ {jjtn001.name = t.image; jjtn001.line = t.beginLine;}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  0);
                     }
                   }
/*@egen*/                (Operator_5())*
}

void Term_NOT()         : {/*@bgen(jjtree) #NOT( 1) */
                           ASTNOT jjtn000 = new ASTNOT(JJTNOT);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) #NOT( 1) */
    try {
/*@egen*/
    t=<NOT_OP> {jjtn000.line = t.beginLine;} Term()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  1);
      }
    }
/*@egen*/
}

void Term_NEW()       : {}
{
    <NEW> Term_NEW_1()
}

void Term_NEW_1()       : {Token t;}
{
    <INT> <LPARRETO> Expression()/*@bgen(jjtree) #NEW_INT_ARRAY( 1) */
                                  {
                                    ASTNEW_INT_ARRAY jjtn001 = new ASTNEW_INT_ARRAY(JJTNEW_INT_ARRAY);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*/ <RPARRETO>/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  1);
                                    }
                                  }
/*@egen*/                  
    | t=<IDENTIFIER>/*@bgen(jjtree) CLASS */
                     {
                       ASTCLASS jjtn002 = new ASTCLASS(JJTCLASS);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn002, true);
                       jjtc002 = false;
                     }
/*@egen*/ {jjtn002.name = t.image; jjtn002.line = t.beginLine;}/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002, true);
                       }
                     }
/*@egen*/         <LPAR>/*@bgen(jjtree) #NEW_CLASS( 1) */
                                                                                          {
                                                                                            ASTNEW_CLASS jjtn003 = new ASTNEW_CLASS(JJTNEW_CLASS);
                                                                                            boolean jjtc003 = true;
                                                                                            jjtree.openNodeScope(jjtn003);
                                                                                          }
                                                                                          try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                                                                                          } finally {
                                                                                            if (jjtc003) {
                                                                                              jjtree.closeNodeScope(jjtn003,  1);
                                                                                            }
                                                                                          }
/*@egen*/              
}

void Operator_1()         : {/*@bgen(jjtree) #AND( 2) */
                             ASTAND jjtn000 = new ASTAND(JJTAND);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) #AND( 2) */
    try {
/*@egen*/
    t=<AND_OP> {jjtn000.line = t.beginLine;} Expression1()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}

void Operator_2()        : {/*@bgen(jjtree) #LT( 2) */
                            ASTLT jjtn000 = new ASTLT(JJTLT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) #LT( 2) */
    try {
/*@egen*/
    t=<LT_OP> {jjtn000.line = t.beginLine;} Expression2()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}

void Operator_3()       : {}
{
    Operator_3_PLUS()
    | Operator_3_MINUS()
}

void Operator_3_PLUS()        : {/*@bgen(jjtree) #ADD( 2) */
                                 ASTADD jjtn000 = new ASTADD(JJTADD);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) #ADD( 2) */
    try {
/*@egen*/
    t=<PLUS_OP> {jjtn000.line = t.beginLine;} Expression3()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}   

void Operator_3_MINUS()        : {/*@bgen(jjtree) #SUB( 2) */
                                  ASTSUB jjtn000 = new ASTSUB(JJTSUB);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) #SUB( 2) */
    try {
/*@egen*/
    t=<MINUS_OP> {jjtn000.line = t.beginLine;} Expression3()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}   

void Operator_4()       : {Token t;}
{
    Operator_4_TIMES()
    | Operator_4_DIVIDE()
}

void Operator_4_TIMES()         : {/*@bgen(jjtree) #MUL( 2) */
                                   ASTMUL jjtn000 = new ASTMUL(JJTMUL);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) #MUL( 2) */
    try {
/*@egen*/
    t=<TIMES_OP> {jjtn000.line = t.beginLine;} Term()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}

void Operator_4_DIVIDE()         : {/*@bgen(jjtree) #DIV( 2) */
                                    ASTDIV jjtn000 = new ASTDIV(JJTDIV);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) #DIV( 2) */
    try {
/*@egen*/
    t=<DIVIDE_OP> {jjtn000.line = t.beginLine;} Term()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}

void Operator_5()       : {}
{
    Operator_5_ARRAY()
    | Operator_5_DOT()
}

void Operator_5_ARRAY()                  : {/*@bgen(jjtree) #ACCESS_ARRAY( 2) */
  ASTACCESS_ARRAY jjtn000 = new ASTACCESS_ARRAY(JJTACCESS_ARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ACCESS_ARRAY( 2) */
    try {
/*@egen*/
    <LPARRETO> Expression() <RPARRETO>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/ 
}

void Operator_5_DOT()       : {}
{
    <DOT> Operator_5_DOT_1()
}

void Operator_5_DOT_1()       : {Token t;}
{
    t=<LENGTH>/*@bgen(jjtree) #LENGTH( 1) */
               {
                 ASTLENGTH jjtn001 = new ASTLENGTH(JJTLENGTH);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*//*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn001,  1);
                 jjtc001 = false;
               }
/*@egen*/ {jjtn001.line = t.beginLine;}/*@bgen(jjtree)*/
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  1);
                 }
               }
/*@egen*/           
    | t=<IDENTIFIER>/*@bgen(jjtree) FUNCTION */
                     {
                       ASTFUNCTION jjtn002 = new ASTFUNCTION(JJTFUNCTION);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn002, true);
                       jjtc002 = false;
                     }
/*@egen*/ {jjtn002.name = t.image; jjtn002.line = t.beginLine;}/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002, true);
                       }
                     }
/*@egen*/           <LPAR> Operator_5_Call_Args()/*@bgen(jjtree) #CALL_FUNCTION( 3) */
                                                                                                                   {
                                                                                                                     ASTCALL_FUNCTION jjtn003 = new ASTCALL_FUNCTION(JJTCALL_FUNCTION);
                                                                                                                     boolean jjtc003 = true;
                                                                                                                     jjtree.openNodeScope(jjtn003);
                                                                                                                   }
                                                                                                                   try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                                                                                                                   } finally {
                                                                                                                     if (jjtc003) {
                                                                                                                       jjtree.closeNodeScope(jjtn003,  3);
                                                                                                                     }
                                                                                                                   }
/*@egen*/                  
}

void Operator_5_Call_Args()                 : {/*@bgen(jjtree) CALL_ARGUMENTS */
  ASTCALL_ARGUMENTS jjtn000 = new ASTCALL_ARGUMENTS(JJTCALL_ARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CALL_ARGUMENTS */
    try {
/*@egen*/
    (
        Expression() (
            <VIRG> Expression()
        )*
    )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}