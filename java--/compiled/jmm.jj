/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. jmm.jj */
/*@egen*/options {
    LOOKAHEAD=2;
               
    FORCE_LA_CHECK=true;
    //DEBUG_LOOKAHEAD=true;
}

PARSER_BEGIN(jmm)

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;

public class jmm/*@bgen(jjtree)*/implements jmmTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTjmmState jjtree = new JJTjmmState();

/*@egen*/

    private static jmm parser;
    private static int optRN = -1;
    private static boolean optO = false;
    

    public static void main(String args []) throws ParseException, IOException{

        if(readArgs(args) == false){
            return;
        }

        SimpleNode node = parser.Program();
        node.dump("");
    }

    public static FileInputStream openFile(String filename){
        File file = new File(filename);
            
        FileInputStream fileStream;
        try {
            fileStream = new FileInputStream(file);
            return fileStream;
        } catch (FileNotFoundException e) {
            System.out.println("Error in file stream constructor: ");
            System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
            e.printStackTrace();
            return null;
        }
    }

    public static boolean readArgs(String args[]){
        if(args.length < 1){
            System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
            return false;
        }

        FileInputStream fileStream = openFile(args[0]);
        if(fileStream == null){
            System.out.println("File not found!");
            return false;
        }
        parser = new jmm(fileStream);

        for(int i = 1; i < args.length; i++){
            if(validArgs(args[i]) == false)
                return false;
        }
        return true;
    }

    public static boolean validArgs(String arg){
        if(arg.equals("-o")) { 
            if(optO) {
                System.out.println("Error: Option O has already been defined.");
                System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
                return false;
            }
            optO = true;
        }
        else if(arg.length() < 3){
            System.out.println("Error: Non valid argument");
            System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
            return false;
        }
        else if(arg.substring(0, 3).equals("-r=")) {
            if(optRN >= 0) {
                System.out.println("Error: Option R has already been defined.");
                System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
                return false;
            }
            if(arg.substring(3).matches("[0-9]+")) {
                optRN = Integer.parseInt(arg.substring(3));
                if(optRN < 0) {
                    System.out.println("Error: The number in option R must be an integer greater or equal to 0.");
                    System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
                    return false;
                }
            }
            else {
                System.out.println("Error: The number in option R must be an integer.");
                System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
                return false;
            }
        }
        else {
            System.out.println("Error: Non valid argument");
            System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
            return false;
        }
        return true;	
    }
}

PARSER_END(jmm)

SKIP :
{
    " " | "\t" | "\n" | "\r"
    /* Comments */
    | < "//" (~["\r", "\n"])* >
    | < "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/" >
}

TOKEN :
{
    < AND_OP : "&&" >
    | < LT_OP : "<" >
    | < PLUS_OP : "+" >
    | < MINUS_OP : "-" >
    | < TIMES_OP : "*" >
    | < DIVIDE_OP : "/" >
    | < NOT_OP : "!" >
    | < WHILE : "while" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < ASSIGN : "=" >
    | < ASPA : "\"" >
    | < LPAR : "(" >
    | < RPAR : ")" >
    | < DOT : "." >
    | < LENGTH : "length" >
    | < VIRG : "," >
    | < PVIRG : ";" >
    | < LCHAVETA : "{" >
    | < RCHAVETA : "}" >
    | < LPARRETO : "[" >
    | < RPARRETO : "]" >
    | < EXTENDS : "extends" >
    | < CLASS : "class" >
    | < PUBLIC : "public" >
    | < STATIC : "static" >
    | < VOID : "void" >
    | < MAIN : "main" >
    | < INT : "int" >
    | < BOOLEAN : "boolean" >
    | < TRUE : "true" >
    | < FALSE : "false" >
    | < RETURN : "return" >
    | < THIS : "this" >
    | < NEW : "new" >
    | < STRING : "String" >
}

TOKEN :
{
    < INTEGER : (<DIGIT>)+ >
    | < IDENTIFIER : <LETTER> (<ALPHANUM>)* >

    | < #LETTER : [ "$", "A"-"Z", "_", "a"-"z" ] >
    | < #DIGIT : [ "0"-"9" ] >
    | < #ALPHANUM : <LETTER> | <DIGIT> >
    | < STRING_ASPAS : "\"" ([ "a"-"z", "A"-"Z", "0"-"9", ":", " ", "=" ])+ "\"" >
}

SimpleNode Program() : {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    Statement()/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ClassDeclaration() : {/*@bgen(jjtree) ClassDeclaration */
  ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassDeclaration */
    try {
/*@egen*/
    <CLASS> <IDENTIFIER> (<EXTENDS> <IDENTIFIER>)? <LCHAVETA>
    ( VarDeclaration() )*
    ( <PUBLIC> ClassDeclaration_1() )*
    <RCHAVETA>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ClassDeclaration_1() : {/*@bgen(jjtree) ClassDeclaration_1 */
  ASTClassDeclaration_1 jjtn000 = new ASTClassDeclaration_1(JJTCLASSDECLARATION_1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassDeclaration_1 */
    try {
/*@egen*/
    MainDeclaration()
    | MethodDeclaration()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarDeclaration() : {/*@bgen(jjtree) VarDeclaration */
  ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarDeclaration */
    try {
/*@egen*/
    Type() <IDENTIFIER> <PVIRG>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MainDeclaration() : {/*@bgen(jjtree) MainDeclaration */
  ASTMainDeclaration jjtn000 = new ASTMainDeclaration(JJTMAINDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MainDeclaration */
    try {
/*@egen*/
    <STATIC> <VOID> <MAIN> <LPAR> <STRING> <LPARRETO> <RPARRETO> <IDENTIFIER>
    <RPAR> <LCHAVETA> (VarDeclaration())* (Statement())* <RCHAVETA>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodDeclaration() : {/*@bgen(jjtree) MethodDeclaration */
  ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodDeclaration */
    try {
/*@egen*/
    Type() <IDENTIFIER> <LPAR>
    (Type() <IDENTIFIER> 
        ( <VIRG> Type() <IDENTIFIER> )*
    )?
    <RPAR> <LCHAVETA>
    ( VarDeclaration() )*
    ( Statement() )*
    <RETURN> Expression() <PVIRG> <RCHAVETA>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Type() : {/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    <INT> (<LPARRETO> <RPARRETO>)?
    | <BOOLEAN>
    | <IDENTIFIER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Statement()       : {}
{
    Multiple_Statements()
    | If_Else_Statement()
    | While_Statement()


    // | Expression() <PVIRG>
    // | <IDENTIFIER> Statement1() <PVIRG>
    |/*@bgen(jjtree) IDENTIFIER */
      {
        ASTIDENTIFIER jjtn001 = new ASTIDENTIFIER(JJTIDENTIFIER);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ <IDENTIFIER>/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
/*@egen*/             Statement1() <PVIRG>
}

void Multiple_Statements()             : {/*@bgen(jjtree) Statements */
  ASTStatements jjtn000 = new ASTStatements(JJTSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statements */
    try {
/*@egen*/
    <LCHAVETA> (Statement())* <RCHAVETA>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void If_Else_Statement()             : {/*@bgen(jjtree) #IF_ELSE( 3) */
  ASTIF_ELSE jjtn000 = new ASTIF_ELSE(JJTIF_ELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #IF_ELSE( 3) */
    try {
/*@egen*/
    <IF> <LPAR> Expression() <RPAR>/*@bgen(jjtree) #IF( 1) */
                                    {
                                      ASTIF jjtn001 = new ASTIF(JJTIF);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*/ Statement()/*@bgen(jjtree)*/
                                    } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte001;
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        throw (ParseException)jjte001;
                                      }
                                      throw (Error)jjte001;
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  1);
                                      }
                                    }
/*@egen*/        <ELSE>/*@bgen(jjtree) #ELSE( 1) */
                                                              {
                                                                ASTELSE jjtn002 = new ASTELSE(JJTELSE);
                                                                boolean jjtc002 = true;
                                                                jjtree.openNodeScope(jjtn002);
                                                              }
                                                              try {
/*@egen*/ Statement()/*@bgen(jjtree)*/
                                                              } catch (Throwable jjte002) {
                                                                if (jjtc002) {
                                                                  jjtree.clearNodeScope(jjtn002);
                                                                  jjtc002 = false;
                                                                } else {
                                                                  jjtree.popNode();
                                                                }
                                                                if (jjte002 instanceof RuntimeException) {
                                                                  throw (RuntimeException)jjte002;
                                                                }
                                                                if (jjte002 instanceof ParseException) {
                                                                  throw (ParseException)jjte002;
                                                                }
                                                                throw (Error)jjte002;
                                                              } finally {
                                                                if (jjtc002) {
                                                                  jjtree.closeNodeScope(jjtn002,  1);
                                                                }
                                                              }
/*@egen*/         /*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  3);
      }
    }
/*@egen*/
}

void While_Statement()           : {/*@bgen(jjtree) #WHILE( 2) */
  ASTWHILE jjtn000 = new ASTWHILE(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #WHILE( 2) */
    try {
/*@egen*/
    <WHILE> <LPAR> Expression() <RPAR> Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}

void Statement1()       : {}
{
    Expression_No_Identifier()
    | Statement2()
}

void Statement2()       : {}
{
    <ASSIGN>/*@bgen(jjtree) #ASSIGN( 2) */
             {
               ASTASSIGN jjtn001 = new ASTASSIGN(JJTASSIGN);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
               }
             }
/*@egen*/           
    | <LPARRETO> Expression() <RPARRETO> <ASSIGN>/*@bgen(jjtree) #ASSIGN_ARRAY( 3) */
                                                  {
                                                    ASTASSIGN_ARRAY jjtn002 = new ASTASSIGN_ARRAY(JJTASSIGN_ARRAY);
                                                    boolean jjtc002 = true;
                                                    jjtree.openNodeScope(jjtn002);
                                                  }
                                                  try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
                                                  } catch (Throwable jjte002) {
                                                    if (jjtc002) {
                                                      jjtree.clearNodeScope(jjtn002);
                                                      jjtc002 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte002 instanceof RuntimeException) {
                                                      throw (RuntimeException)jjte002;
                                                    }
                                                    if (jjte002 instanceof ParseException) {
                                                      throw (ParseException)jjte002;
                                                    }
                                                    throw (Error)jjte002;
                                                  } finally {
                                                    if (jjtc002) {
                                                      jjtree.closeNodeScope(jjtn002,  3);
                                                    }
                                                  }
/*@egen*/                 
}

void Expression()       : {}
{
    Expression1() (Operator_1())*
}

void Expression_No_Identifier()       : {}
{
    Term_Literal() (Operator_4())* (Operator_3())* (Operator_2())* (Operator_1())*
}

void Expression1()       : {}
{
    Expression2() (Operator_2())*
}

void Expression2()       : {}
{
    Expression3() (Operator_3())*
}

void Expression3()       : {}
{
    Term() (Operator_4())*
}

void Term()       : {}
{
    Term_Literal()
    | Term_Identifier()
}

void Term_Literal()       : {}
{/*@bgen(jjtree) #INT( 0) */
     {
       ASTINT jjtn001 = new ASTINT(JJTINT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
     }
     try {
/*@egen*/
     <INTEGER>/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001,  0);
       }
     }
/*@egen*/         (Operator_5())*
    |/*@bgen(jjtree) #TRUE( 0) */
      {
        ASTTRUE jjtn002 = new ASTTRUE(JJTTRUE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ <TRUE>/*@bgen(jjtree)*/
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  0);
        }
      }
/*@egen*/          (Operator_5())*
    |/*@bgen(jjtree) #FALSE( 0) */
      {
        ASTFALSE jjtn003 = new ASTFALSE(JJTFALSE);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/ <FALSE>/*@bgen(jjtree)*/
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  0);
        }
      }
/*@egen*/           (Operator_5())*
    |/*@bgen(jjtree) #THIS( 0) */
      {
        ASTTHIS jjtn004 = new ASTTHIS(JJTTHIS);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      }
      try {
/*@egen*/ <THIS>/*@bgen(jjtree)*/
      } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004,  0);
        }
      }
/*@egen*/          (Operator_5())*
    | <LPAR> Expression() <RPAR> (Operator_5())*
    | Term_NEW() (Operator_5())*
    | Term_NOT()
}

void Term_Identifier()       : {}
{/*@bgen(jjtree) #IDENTIFIER( 0) */
    {
      ASTIDENTIFIER jjtn001 = new ASTIDENTIFIER(JJTIDENTIFIER);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    <IDENTIFIER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  0);
      }
    }
/*@egen*/                (Operator_5())*
}

void Term_NOT()       : {}
{
    <NOT_OP>/*@bgen(jjtree) #NOT( 1) */
             {
               ASTNOT jjtn001 = new ASTNOT(JJTNOT);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ Term()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  1);
               }
             }
/*@egen*/        
}

void Term_NEW()       : {}
{
    <NEW> Term_NEW_1()
}

void Term_NEW_1()       : {}
{
    <INT> <LPARRETO> Expression()/*@bgen(jjtree) #NEW_INT_ARRAY( 1) */
                                  {
                                    ASTNEW_INT_ARRAY jjtn001 = new ASTNEW_INT_ARRAY(JJTNEW_INT_ARRAY);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*/ <RPARRETO>/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  1);
                                    }
                                  }
/*@egen*/                  
    |/*@bgen(jjtree) CLASS */
      {
        ASTCLASS jjtn002 = new ASTCLASS(JJTCLASS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ <IDENTIFIER>/*@bgen(jjtree)*/
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
      }
/*@egen*/        <LPAR>/*@bgen(jjtree) #NEW_CLASS( 1) */
                                 {
                                   ASTNEW_CLASS jjtn003 = new ASTNEW_CLASS(JJTNEW_CLASS);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
                                 }
                                 try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003,  1);
                                   }
                                 }
/*@egen*/              
}

void Operator_1()       : {}
{
    <AND_OP>/*@bgen(jjtree) #AND( 2) */
             {
               ASTAND jjtn001 = new ASTAND(JJTAND);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ Expression1()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
               }
             }
/*@egen*/        
}

void Operator_2()       : {}
{
    <LT_OP>/*@bgen(jjtree) #LT( 2) */
            {
              ASTLT jjtn001 = new ASTLT(JJTLT);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ Expression2()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
            }
/*@egen*/       
}

void Operator_3()       : {}
{
    <PLUS_OP>/*@bgen(jjtree) #ADD( 2) */
              {
                ASTADD jjtn001 = new ASTADD(JJTADD);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ Expression3()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
              }
/*@egen*/        
    | <MINUS_OP>/*@bgen(jjtree) #SUB( 2) */
                 {
                   ASTSUB jjtn002 = new ASTSUB(JJTSUB);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                 }
                 try {
/*@egen*/ Expression3()/*@bgen(jjtree)*/
                 } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     throw (RuntimeException)jjte002;
                   }
                   if (jjte002 instanceof ParseException) {
                     throw (ParseException)jjte002;
                   }
                   throw (Error)jjte002;
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  2);
                   }
                 }
/*@egen*/        
}

void Operator_4()       : {}
{
    <TIMES_OP>/*@bgen(jjtree) #MUL( 2) */
               {
                 ASTMUL jjtn001 = new ASTMUL(JJTMUL);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ Term()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
               }
/*@egen*/        
    | <DIVIDE_OP>/*@bgen(jjtree) #DIV( 2) */
                  {
                    ASTDIV jjtn002 = new ASTDIV(JJTDIV);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*/ Term()/*@bgen(jjtree)*/
                  } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      throw (RuntimeException)jjte002;
                    }
                    if (jjte002 instanceof ParseException) {
                      throw (ParseException)jjte002;
                    }
                    throw (Error)jjte002;
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
                    }
                  }
/*@egen*/        
}

void Operator_5()       : {}
{
    <LPARRETO> Expression()/*@bgen(jjtree) #ARRAY( 2) */
                            {
                              ASTARRAY jjtn001 = new ASTARRAY(JJTARRAY);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*/ <RPARRETO>/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  2);
                              }
                            }
/*@egen*/          
    | <DOT> Operator_5_DOT()
}

void Operator_5_DOT()       : {} {/*@bgen(jjtree) #LENGTH( 1) */
    {
      ASTLENGTH jjtn001 = new ASTLENGTH(JJTLENGTH);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    <LENGTH>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  1);
      }
    }
/*@egen*/           
    |/*@bgen(jjtree) FUNCTION */
      {
        ASTFUNCTION jjtn002 = new ASTFUNCTION(JJTFUNCTION);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ <IDENTIFIER>/*@bgen(jjtree)*/
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
      }
/*@egen*/           <LPAR> Args()/*@bgen(jjtree) #CALL_FUNCTION( 3) */
                                           {
                                             ASTCALL_FUNCTION jjtn003 = new ASTCALL_FUNCTION(JJTCALL_FUNCTION);
                                             boolean jjtc003 = true;
                                             jjtree.openNodeScope(jjtn003);
                                           }
                                           try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc003) {
                                               jjtree.closeNodeScope(jjtn003,  3);
                                             }
                                           }
/*@egen*/                  
}

void Args()       : {/*@bgen(jjtree) Args */
  ASTArgs jjtn000 = new ASTArgs(JJTARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Args */
    try {
/*@egen*/
    (
        Expression() (
            <VIRG> Expression()
        )*
    )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}