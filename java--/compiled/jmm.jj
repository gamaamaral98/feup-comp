/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. jmm.jj */
/*@egen*/options {
    LOOKAHEAD=1;
               
    FORCE_LA_CHECK=true;
}

PARSER_BEGIN(jmm)

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;

public class jmm/*@bgen(jjtree)*/implements jmmTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTjmmState jjtree = new JJTjmmState();

/*@egen*/

    private static jmm parser;
    private static int optRN = -1;
    private static boolean optO = false;
    

    public static void main(String args []) throws ParseException, IOException{

        if(readArgs(args) == false){
            return;
        }

        SimpleNode node = parser.Program();
        node.dump("");
    }

    public static FileInputStream openFile(String filename){
        File file = new File(filename);
            
        FileInputStream fileStream;
        try {
            fileStream = new FileInputStream(file);
            return fileStream;
        } catch (FileNotFoundException e) {
            System.out.println("Error in file stream constructor: ");
            System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
            e.printStackTrace();
            return null;
        }
    }

    public static boolean readArgs(String args[]){
        if(args.length < 1){
            System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
            return false;
        }

        FileInputStream fileStream = openFile(args[0]);
        if(fileStream == null){
            System.out.println("File not found!");
            return false;
        }
        parser = new jmm(fileStream);

        for(int i = 1; i < args.length; i++){
            if(validArgs(args[i]) == false)
                return false;
        }
        return true;
    }

    public static boolean validArgs(String arg){
        if(arg.equals("-o")) { 
            if(optO) {
                System.out.println("Error: Option O has already been defined.");
                System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
                return false;
            }
            optO = true;
        }
        else if(arg.length() < 3){
            System.out.println("Error: Non valid argument");
            System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
            return false;
        }
        else if(arg.substring(0, 3).equals("-r=")) {
            if(optRN >= 0) {
                System.out.println("Error: Option R has already been defined.");
                System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
                return false;
            }
            if(arg.substring(3).matches("[0-9]+")) {
                optRN = Integer.parseInt(arg.substring(3));
                if(optRN < 0) {
                    System.out.println("Error: The number in option R must be an integer greater or equal to 0.");
                    System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
                    return false;
                }
            }
            else {
                System.out.println("Error: The number in option R must be an integer.");
                System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
                return false;
            }
        }
        else {
            System.out.println("Error: Non valid argument");
            System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
            return false;
        }
        return true;	
    }

    public static void error_skipto(ParseException e, String error, int kind) {
        System.out.println("Syntatic Error on " + error + ". " + e.toString());
        Token t;
        do {
            t = getNextToken();
            if(t.kind == EOF)
                break;
        } while (t.kind != kind);
    }
}

PARSER_END(jmm)

SKIP :
{
    " " | "\t" | "\n" | "\r"
    /* Comments */
    | < "//" (~["\r", "\n"])* >
    | < "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/" >
}

TOKEN :
{
    < AND_OP : "&&" >
    | < LT_OP : "<" >
    | < PLUS_OP : "+" >
    | < MINUS_OP : "-" >
    | < TIMES_OP : "*" >
    | < DIVIDE_OP : "/" >
    | < NOT_OP : "!" >
    | < WHILE : "while" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < ASSIGN : "=" >
    | < ASPA : "\"" >
    | < LPAR : "(" >
    | < RPAR : ")" >
    | < DOT : "." >
    | < LENGTH : "length" >
    | < VIRG : "," >
    | < PVIRG : ";" >
    | < LCHAVETA : "{" >
    | < RCHAVETA : "}" >
    | < LPARRETO : "[" >
    | < RPARRETO : "]" >
    | < EXTENDS : "extends" >
    | < CLASS : "class" >
    | < PUBLIC : "public" >
    | < STATIC : "static" >
    | < VOID : "void" >
    | < MAIN : "main" >
    | < INT : "int" >
    | < INT_ARRAY : "int[]" >
    | < BOOLEAN : "boolean" >
    | < TRUE : "true" >
    | < FALSE : "false" >
    | < RETURN : "return" >
    | < THIS : "this" >
    | < NEW : "new" >
    | < STRING : "String" >
}

TOKEN :
{
    < INTEGER : (<DIGIT>)+ >
    | < IDENTIFIER : <LETTER> (<ALPHANUM>)* >

    | < #LETTER : [ "$", "A"-"Z", "_", "a"-"z" ] >
    | < #DIGIT : [ "0"-"9" ] >
    | < #ALPHANUM : <LETTER> | <DIGIT> >
}

SimpleNode Program() : {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    ClassDeclaration()/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ClassDeclaration()       : {}
{   
    try{
        <CLASS>/*@bgen(jjtree) CLASS_NAME */
                {
                  ASTCLASS_NAME jjtn001 = new ASTCLASS_NAME(JJTCLASS_NAME);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/            
    } catch(ParseException e){
        System.out.println("Syntatic Error on Class initialization. " + e.toString());
    }
    ClassDeclaration_1()
}

void ClassDeclaration_1()       : {}
{
    ClassDeclaration_Not_Extends()
    | ClassDeclaration_Extends()   
}

void ClassDeclaration_Not_Extends()           : {/*@bgen(jjtree) #CLASS( 3) */
  ASTCLASS jjtn000 = new ASTCLASS(JJTCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #CLASS( 3) */
    try {
/*@egen*/
    try{
        <LCHAVETA>
    }catch(ParseException e){
        error_skipto(e, "Class declaration", LCHAVETA);
    }
    Vars()
    Methods()
    try{
        <RCHAVETA>
    }catch(ParseException e){
        error_skipto(e, "Class declaration", RCHAVETA);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  3);
      }
    }
/*@egen*/
}

void ClassDeclaration_Extends()                   : {/*@bgen(jjtree) #CLASS_EXTENDS( 4) */
  ASTCLASS_EXTENDS jjtn000 = new ASTCLASS_EXTENDS(JJTCLASS_EXTENDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #CLASS_EXTENDS( 4) */
    try {
/*@egen*/
    try{
        <EXTENDS>/*@bgen(jjtree) EXTENDED_CLASS */
                  {
                    ASTEXTENDED_CLASS jjtn001 = new ASTEXTENDED_CLASS(JJTEXTENDED_CLASS);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
                  }
/*@egen*/                 <LCHAVETA>
    }catch(ParseException e){
        error_skipto(e, "Class declaration", LCHAVETA);
    }
    Vars()
    Methods()
    try{
        <RCHAVETA>
    }catch(ParseException e){
        error_skipto(e, "Class declaration", RCHAVETA);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  4);
      }
    }
/*@egen*/
}

void Methods()          : {/*@bgen(jjtree) METHODS */
  ASTMETHODS jjtn000 = new ASTMETHODS(JJTMETHODS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) METHODS */
    try {
/*@egen*/
    // ( try{
    //     <PUBLIC> 
    // }catch(ParseException e){
    //     System.out.println("Missing PUBLIC in Method" + e.toString());
    // }
    // ClassDeclaration_Methods() )*

    ( <PUBLIC> ClassDeclaration_Methods() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Vars()            : {/*@bgen(jjtree) VAR_DECLS */
  ASTVAR_DECLS jjtn000 = new ASTVAR_DECLS(JJTVAR_DECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VAR_DECLS */
    try {
/*@egen*/
    (VarDeclaration())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ClassDeclaration_Methods()       : {}
{
    MainDeclaration()
    | MethodDeclaration()
}

void VarDeclaration()              : {/*@bgen(jjtree) #VAR_DECL( 2) */
  ASTVAR_DECL jjtn000 = new ASTVAR_DECL(JJTVAR_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #VAR_DECL( 2) */
    try {
/*@egen*/
    Type()/*@bgen(jjtree) IDENTIFIER */
           {
             ASTIDENTIFIER jjtn001 = new ASTIDENTIFIER(JJTIDENTIFIER);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
           }
/*@egen*/             <PVIRG>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}

void Vars_Statement()              : {/*@bgen(jjtree) METHOD_BODY */
  ASTMETHOD_BODY jjtn000 = new ASTMETHOD_BODY(JJTMETHOD_BODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) METHOD_BODY */
    try {
/*@egen*/
    Vars_Statement_Aux()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Vars_Statement_Aux()       : {}
{
    Type_1()/*@bgen(jjtree) IDENTIFIER */
             {
               ASTIDENTIFIER jjtn001 = new ASTIDENTIFIER(JJTIDENTIFIER);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
             }
/*@egen*/            /*@bgen(jjtree) #VAR_DECL( 2) */
                                      {
                                        ASTVAR_DECL jjtn002 = new ASTVAR_DECL(JJTVAR_DECL);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
                                      }
                                      try {
/*@egen*/ <PVIRG>/*@bgen(jjtree)*/
                                      } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                        }
                                      }
/*@egen*/              Vars_Statement_Aux()
    |/*@bgen(jjtree) IDENTIFIER */
      {
        ASTIDENTIFIER jjtn003 = new ASTIDENTIFIER(JJTIDENTIFIER);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
      } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          throw (RuntimeException)jjte003;
        }
        if (jjte003 instanceof ParseException) {
          throw (ParseException)jjte003;
        }
        throw (Error)jjte003;
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
      }
/*@egen*/             Vars_Statement_1()
    | Statement_Aux() (Statement())*
}

void Vars_Statement_1()       : {}
{/*@bgen(jjtree) IDENTIFIER */
    {
      ASTIDENTIFIER jjtn001 = new ASTIDENTIFIER(JJTIDENTIFIER);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/            /*@bgen(jjtree) #VAR_DECL( 2) */
                             {
                               ASTVAR_DECL jjtn002 = new ASTVAR_DECL(JJTVAR_DECL);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
                             }
                             try {
/*@egen*/ <PVIRG>/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002,  2);
                               }
                             }
/*@egen*/              Vars_Statement_Aux()
    | Statement1() <PVIRG> (Statement())*
}

void MainDeclaration()          : {/*@bgen(jjtree) #MAIN( 2) */
  ASTMAIN jjtn000 = new ASTMAIN(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #MAIN( 2) */
    try {
/*@egen*/
    try{
        <STATIC> <VOID> <MAIN> <LPAR> <STRING> <LPARRETO> <RPARRETO>/*@bgen(jjtree) ARGV */
                                                                     {
                                                                       ASTARGV jjtn001 = new ASTARGV(JJTARGV);
                                                                       boolean jjtc001 = true;
                                                                       jjtree.openNodeScope(jjtn001);
                                                                     }
                                                                     try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
                                                                     } catch (Throwable jjte001) {
                                                                       if (jjtc001) {
                                                                         jjtree.clearNodeScope(jjtn001);
                                                                         jjtc001 = false;
                                                                       } else {
                                                                         jjtree.popNode();
                                                                       }
                                                                       if (jjte001 instanceof RuntimeException) {
                                                                         throw (RuntimeException)jjte001;
                                                                       }
                                                                       if (jjte001 instanceof ParseException) {
                                                                         throw (ParseException)jjte001;
                                                                       }
                                                                       throw (Error)jjte001;
                                                                     } finally {
                                                                       if (jjtc001) {
                                                                         jjtree.closeNodeScope(jjtn001, true);
                                                                       }
                                                                     }
/*@egen*/      
        <RPAR> <LCHAVETA>
    }catch(ParseException e){
        error_skipto(e, "Main declaration", LCHAVETA);
    }
    Vars_Statement()
    try{
        <RCHAVETA>
    }catch(ParseException e){
        System.out.println("Missing } in Main Declaration." + e.toString());
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}

void MethodDeclaration()            : {/*@bgen(jjtree) #METHOD( 5) */
  ASTMETHOD jjtn000 = new ASTMETHOD(JJTMETHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #METHOD( 5) */
    try {
/*@egen*/
    Type()/*@bgen(jjtree) NAME */
           {
             ASTNAME jjtn001 = new ASTNAME(JJTNAME);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
           }
/*@egen*/       <LPAR>
    MethodDeclaration_Args()
    <RPAR> <LCHAVETA>
    Vars_Statement()
    <RETURN> Expression() <PVIRG> <RCHAVETA>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  5);
      }
    }
/*@egen*/
}

void MethodDeclaration_Args()              : {/*@bgen(jjtree) METHOD_ARGS */
  ASTMETHOD_ARGS jjtn000 = new ASTMETHOD_ARGS(JJTMETHOD_ARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) METHOD_ARGS */
    try {
/*@egen*/
    (
        Type()/*@bgen(jjtree) #ARG( 2) */
               {
                 ASTARG jjtn002 = new ASTARG(JJTARG);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
               }
               try {
/*@egen*/ (/*@bgen(jjtree) IDENTIFIER */
                {
                  ASTIDENTIFIER jjtn001 = new ASTIDENTIFIER(JJTIDENTIFIER);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/Identifier()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/            )/*@bgen(jjtree)*/
               } catch (Throwable jjte002) {
                 if (jjtc002) {
                   jjtree.clearNodeScope(jjtn002);
                   jjtc002 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte002 instanceof RuntimeException) {
                   throw (RuntimeException)jjte002;
                 }
                 if (jjte002 instanceof ParseException) {
                   throw (ParseException)jjte002;
                 }
                 throw (Error)jjte002;
               } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002,  2);
                 }
               }
/*@egen*/        
        ( <VIRG> Type()/*@bgen(jjtree) #ARG( 2) */
                        {
                          ASTARG jjtn004 = new ASTARG(JJTARG);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
                        }
                        try {
/*@egen*/ (/*@bgen(jjtree) IDENTIFIER */
                         {
                           ASTIDENTIFIER jjtn003 = new ASTIDENTIFIER(JJTIDENTIFIER);
                           boolean jjtc003 = true;
                           jjtree.openNodeScope(jjtn003);
                         }
                         try {
/*@egen*/Identifier()/*@bgen(jjtree)*/
                         } catch (Throwable jjte003) {
                           if (jjtc003) {
                             jjtree.clearNodeScope(jjtn003);
                             jjtc003 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte003 instanceof RuntimeException) {
                             throw (RuntimeException)jjte003;
                           }
                           if (jjte003 instanceof ParseException) {
                             throw (ParseException)jjte003;
                           }
                           throw (Error)jjte003;
                         } finally {
                           if (jjtc003) {
                             jjtree.closeNodeScope(jjtn003, true);
                           }
                         }
/*@egen*/            )/*@bgen(jjtree)*/
                        } catch (Throwable jjte004) {
                          if (jjtc004) {
                            jjtree.clearNodeScope(jjtn004);
                            jjtc004 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte004 instanceof RuntimeException) {
                            throw (RuntimeException)jjte004;
                          }
                          if (jjte004 instanceof ParseException) {
                            throw (ParseException)jjte004;
                          }
                          throw (Error)jjte004;
                        } finally {
                          if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004,  2);
                          }
                        }
/*@egen*/         )*
    )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Type()       : {}
{/*@bgen(jjtree) INT */
    {
      ASTINT jjtn001 = new ASTINT(JJTINT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    <INT>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/     
    |/*@bgen(jjtree) INT_ARRAY */
      {
        ASTINT_ARRAY jjtn002 = new ASTINT_ARRAY(JJTINT_ARRAY);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ <INT_ARRAY>/*@bgen(jjtree)*/
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
      }
/*@egen*/           
    |/*@bgen(jjtree) BOOLEAN */
      {
        ASTBOOLEAN jjtn003 = new ASTBOOLEAN(JJTBOOLEAN);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/ <BOOLEAN>/*@bgen(jjtree)*/
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
      }
/*@egen*/         
    |/*@bgen(jjtree) IDENTIFIER */
      {
        ASTIDENTIFIER jjtn004 = new ASTIDENTIFIER(JJTIDENTIFIER);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      }
      try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
      } catch (Throwable jjte004) {
        if (jjtc004) {
          jjtree.clearNodeScope(jjtn004);
          jjtc004 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte004 instanceof RuntimeException) {
          throw (RuntimeException)jjte004;
        }
        if (jjte004 instanceof ParseException) {
          throw (ParseException)jjte004;
        }
        throw (Error)jjte004;
      } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004, true);
        }
      }
/*@egen*/            
}

void Type_1()       : {}
{/*@bgen(jjtree) INT */
    {
      ASTINT jjtn001 = new ASTINT(JJTINT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    <INT>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/     
    |/*@bgen(jjtree) INT_ARRAY */
      {
        ASTINT_ARRAY jjtn002 = new ASTINT_ARRAY(JJTINT_ARRAY);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ <INT_ARRAY>/*@bgen(jjtree)*/
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
      }
/*@egen*/           
    |/*@bgen(jjtree) BOOLEAN */
      {
        ASTBOOLEAN jjtn003 = new ASTBOOLEAN(JJTBOOLEAN);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/ <BOOLEAN>/*@bgen(jjtree)*/
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
        }
      }
/*@egen*/         
}

void Statement()       : {}
{
    // try{
    //     Multiple_Statements()
    //     | If_Else_Statement()
    //     | While_Statement()
    //     | <IDENTIFIER> #IDENTIFIER Statement1() <PVIRG>
    // }
    // catch(ParseException e){
    //     System.out.println(e.toString());
    // }
    Multiple_Statements()
    | If_Else_Statement()
    | While_Statement()
    |/*@bgen(jjtree) IDENTIFIER */
      {
        ASTIDENTIFIER jjtn001 = new ASTIDENTIFIER(JJTIDENTIFIER);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
      }
      try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          throw (RuntimeException)jjte001;
        }
        if (jjte001 instanceof ParseException) {
          throw (ParseException)jjte001;
        }
        throw (Error)jjte001;
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
        }
      }
/*@egen*/             Statement1() <PVIRG>
}

void Statement_Aux()       : {}
{
    Multiple_Statements()
    | If_Else_Statement()
    | While_Statement()
}

void Multiple_Statements()                 : {/*@bgen(jjtree) STATEMENT_LIST */
  ASTSTATEMENT_LIST jjtn000 = new ASTSTATEMENT_LIST(JJTSTATEMENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) STATEMENT_LIST */
    try {
/*@egen*/
    <LCHAVETA> (Statement())* <RCHAVETA>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void If_Else_Statement()             : {/*@bgen(jjtree) #IF_ELSE( 3) */
  ASTIF_ELSE jjtn000 = new ASTIF_ELSE(JJTIF_ELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #IF_ELSE( 3) */
    try {
/*@egen*/
    try{
        <IF> <LPAR> Expression() <RPAR>
    }catch(ParseException e){
        error_skipto(e, "IF statement declaration", RPAR);
    }
    Statement()
    try{
        <ELSE>
    } catch(ParseException e){
        System.out.println("Missing ELSE in IF_ELSE Statement." + e.toString());
    }
    Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  3);
      }
    }
/*@egen*/
}

void While_Statement()           : {/*@bgen(jjtree) #WHILE( 2) */
  ASTWHILE jjtn000 = new ASTWHILE(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #WHILE( 2) */
    try {
/*@egen*/
    try{
        <WHILE> <LPAR> Expression() <RPAR>
    }
    catch (ParseException e) {
        error_skipto(e, "WHILE statement declaration", RPAR);
    }
    Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}

void Statement1()       : {}
{
    Expression_No_Identifier()
    | Operator_5_DOT() (Operator_5())*
    | <ASSIGN>/*@bgen(jjtree) #ASSIGN( 2) */
               {
                 ASTASSIGN jjtn001 = new ASTASSIGN(JJTASSIGN);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
               }
/*@egen*/           
    | <LPARRETO> Expression()/*@bgen(jjtree) #ACCESS_ARRAY( 2) */
                              {
                                ASTACCESS_ARRAY jjtn002 = new ASTACCESS_ARRAY(JJTACCESS_ARRAY);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
                              }
                              try {
/*@egen*/ <RPARRETO>/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002,  2);
                                }
                              }
/*@egen*/                  Statement2() 
}

void Statement2()       : {}
{
    <ASSIGN>/*@bgen(jjtree) #ASSIGN_ARRAY( 2) */
             {
               ASTASSIGN_ARRAY jjtn001 = new ASTASSIGN_ARRAY(JJTASSIGN_ARRAY);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
               }
             }
/*@egen*/                 
    | (Operator_5())*
}

void Expression()       : {}
{
    Expression1() (Operator_1())*
}

void Expression_No_Identifier()       : {}
{
    Term_Literal() (Operator_4())* (Operator_3())* (Operator_2())* (Operator_1())*
}

void Expression1()       : {}
{
    Expression2() (Operator_2())*
}

void Expression2()       : {}
{
    Expression3() (Operator_3())*
}

void Expression3()       : {}
{
    Term() (Operator_4())*
}

void Term()       : {}
{
    Term_Literal()
    | Term_Identifier()
}

void Term_Literal()       : {}
{/*@bgen(jjtree) #INT( 0) */
     {
       ASTINT jjtn001 = new ASTINT(JJTINT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
     }
     try {
/*@egen*/
     <INTEGER>/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001,  0);
       }
     }
/*@egen*/         (Operator_5())*
    |/*@bgen(jjtree) #TRUE( 0) */
      {
        ASTTRUE jjtn002 = new ASTTRUE(JJTTRUE);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ <TRUE>/*@bgen(jjtree)*/
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002,  0);
        }
      }
/*@egen*/          (Operator_5())*
    |/*@bgen(jjtree) #FALSE( 0) */
      {
        ASTFALSE jjtn003 = new ASTFALSE(JJTFALSE);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
      }
      try {
/*@egen*/ <FALSE>/*@bgen(jjtree)*/
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  0);
        }
      }
/*@egen*/           (Operator_5())*
    |/*@bgen(jjtree) #THIS( 0) */
      {
        ASTTHIS jjtn004 = new ASTTHIS(JJTTHIS);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
      }
      try {
/*@egen*/ <THIS>/*@bgen(jjtree)*/
      } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004,  0);
        }
      }
/*@egen*/          (Operator_5())*
    | <LPAR> Expression() <RPAR> (Operator_5())*
    | Term_NEW() (Operator_5())*
    | Term_NOT()
}

void Term_Identifier()       : {}
{/*@bgen(jjtree) #IDENTIFIER( 0) */
    {
      ASTIDENTIFIER jjtn001 = new ASTIDENTIFIER(JJTIDENTIFIER);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  0);
      }
    }
/*@egen*/                (Operator_5())*
}

void Term_NOT()         : {/*@bgen(jjtree) #NOT( 1) */
  ASTNOT jjtn000 = new ASTNOT(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #NOT( 1) */
    try {
/*@egen*/
    <NOT_OP> Term()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  1);
      }
    }
/*@egen*/
}

void Term_NEW()       : {}
{
    <NEW> Term_NEW_1()
}

void Term_NEW_1()       : {}
{
    <INT> <LPARRETO> Expression()/*@bgen(jjtree) #NEW_INT_ARRAY( 1) */
                                  {
                                    ASTNEW_INT_ARRAY jjtn001 = new ASTNEW_INT_ARRAY(JJTNEW_INT_ARRAY);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*/ <RPARRETO>/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  1);
                                    }
                                  }
/*@egen*/                  
    |/*@bgen(jjtree) CLASS */
      {
        ASTCLASS jjtn002 = new ASTCLASS(JJTCLASS);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
      }
/*@egen*/        <LPAR>/*@bgen(jjtree) #NEW_CLASS( 1) */
                                 {
                                   ASTNEW_CLASS jjtn003 = new ASTNEW_CLASS(JJTNEW_CLASS);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
                                 }
                                 try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003,  1);
                                   }
                                 }
/*@egen*/              
}

void Operator_1()         : {/*@bgen(jjtree) #AND( 2) */
  ASTAND jjtn000 = new ASTAND(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AND( 2) */
    try {
/*@egen*/
    <AND_OP> Expression1()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}

void Operator_2()        : {/*@bgen(jjtree) #LT( 2) */
  ASTLT jjtn000 = new ASTLT(JJTLT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #LT( 2) */
    try {
/*@egen*/
    <LT_OP> Expression2()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}

void Operator_3()       : {}
{
    <PLUS_OP>/*@bgen(jjtree) #ADD( 2) */
              {
                ASTADD jjtn001 = new ASTADD(JJTADD);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ Expression3()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
              }
/*@egen*/        
    | <MINUS_OP>/*@bgen(jjtree) #SUB( 2) */
                 {
                   ASTSUB jjtn002 = new ASTSUB(JJTSUB);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                 }
                 try {
/*@egen*/ Expression3()/*@bgen(jjtree)*/
                 } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     throw (RuntimeException)jjte002;
                   }
                   if (jjte002 instanceof ParseException) {
                     throw (ParseException)jjte002;
                   }
                   throw (Error)jjte002;
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  2);
                   }
                 }
/*@egen*/        
}

void Operator_4()       : {}
{
    <TIMES_OP>/*@bgen(jjtree) #MUL( 2) */
               {
                 ASTMUL jjtn001 = new ASTMUL(JJTMUL);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ Term()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
               }
/*@egen*/        
    | <DIVIDE_OP>/*@bgen(jjtree) #DIV( 2) */
                  {
                    ASTDIV jjtn002 = new ASTDIV(JJTDIV);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*/ Term()/*@bgen(jjtree)*/
                  } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      throw (RuntimeException)jjte002;
                    }
                    if (jjte002 instanceof ParseException) {
                      throw (ParseException)jjte002;
                    }
                    throw (Error)jjte002;
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
                    }
                  }
/*@egen*/        
}

void Operator_5()       : {}
{
    Operator_5_ARRAY()
    | Operator_5_DOT()
}

void Operator_5_ARRAY()                  : {/*@bgen(jjtree) #ACCESS_ARRAY( 2) */
  ASTACCESS_ARRAY jjtn000 = new ASTACCESS_ARRAY(JJTACCESS_ARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ACCESS_ARRAY( 2) */
    try {
/*@egen*/
    <LPARRETO> Expression() <RPARRETO>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
/*@egen*/
}

void Operator_5_DOT()       : {}
{
    <DOT> Operator_5_DOT_1()
}

void Operator_5_DOT_1()       : {}
{/*@bgen(jjtree) #LENGTH( 1) */
    {
      ASTLENGTH jjtn001 = new ASTLENGTH(JJTLENGTH);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    <LENGTH>/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  1);
      }
    }
/*@egen*/           
    |/*@bgen(jjtree) FUNCTION */
      {
        ASTFUNCTION jjtn002 = new ASTFUNCTION(JJTFUNCTION);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
      }
      try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
      } catch (Throwable jjte002) {
        if (jjtc002) {
          jjtree.clearNodeScope(jjtn002);
          jjtc002 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte002 instanceof RuntimeException) {
          throw (RuntimeException)jjte002;
        }
        if (jjte002 instanceof ParseException) {
          throw (ParseException)jjte002;
        }
        throw (Error)jjte002;
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
        }
      }
/*@egen*/           <LPAR> Operator_5_Call_Args()/*@bgen(jjtree) #CALL_FUNCTION( 3) */
                                                           {
                                                             ASTCALL_FUNCTION jjtn003 = new ASTCALL_FUNCTION(JJTCALL_FUNCTION);
                                                             boolean jjtc003 = true;
                                                             jjtree.openNodeScope(jjtn003);
                                                           }
                                                           try {
/*@egen*/ <RPAR>/*@bgen(jjtree)*/
                                                           } finally {
                                                             if (jjtc003) {
                                                               jjtree.closeNodeScope(jjtn003,  3);
                                                             }
                                                           }
/*@egen*/                  
}

void Operator_5_Call_Args()                 : {/*@bgen(jjtree) CALL_ARGUMENTS */
  ASTCALL_ARGUMENTS jjtn000 = new ASTCALL_ARGUMENTS(JJTCALL_ARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CALL_ARGUMENTS */
    try {
/*@egen*/
    (
        Expression() (
            <VIRG> Expression()
        )*
    )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
} 

void Identifier()       : {Token t;}
{
    t=<IDENTIFIER> {jjtn000.name = t.image;}
}