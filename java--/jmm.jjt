options {
    LOOKAHEAD=1;
    MULTI=true;
    FORCE_LA_CHECK=true;
}

PARSER_BEGIN(jmm)

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;

public class jmm{

    private static jmm parser;
    private static int optRN = -1;
    private static boolean optO = false;
    

    public static void main(String args []) throws ParseException, IOException{

        if(readArgs(args) == false){
            return;
        }

        SimpleNode node = parser.Program();
        node.dump("");
    }

    public static FileInputStream openFile(String filename){
        File file = new File(filename);
            
        FileInputStream fileStream;
        try {
            fileStream = new FileInputStream(file);
            return fileStream;
        } catch (FileNotFoundException e) {
            System.out.println("Error in file stream constructor: ");
            System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
            e.printStackTrace();
            return null;
        }
    }

    public static boolean readArgs(String args[]){
        if(args.length < 1){
            System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
            return false;
        }

        FileInputStream fileStream = openFile(args[0]);
        if(fileStream == null){
            System.out.println("File not found!");
            return false;
        }
        parser = new jmm(fileStream);

        for(int i = 1; i < args.length; i++){
            if(validArgs(args[i]) == false)
                return false;
        }
        return true;
    }

    public static boolean validArgs(String arg){
        if(arg.equals("-o")) { 
            if(optO) {
                System.out.println("Error: Option O has already been defined.");
                System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
                return false;
            }
            optO = true;
        }
        else if(arg.length() < 3){
            System.out.println("Error: Non valid argument");
            System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
            return false;
        }
        else if(arg.substring(0, 3).equals("-r=")) {
            if(optRN >= 0) {
                System.out.println("Error: Option R has already been defined.");
                System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
                return false;
            }
            if(arg.substring(3).matches("[0-9]+")) {
                optRN = Integer.parseInt(arg.substring(3));
                if(optRN < 0) {
                    System.out.println("Error: The number in option R must be an integer greater or equal to 0.");
                    System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
                    return false;
                }
            }
            else {
                System.out.println("Error: The number in option R must be an integer.");
                System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
                return false;
            }
        }
        else {
            System.out.println("Error: Non valid argument");
            System.out.println("Usage: java -cp bin jmm <filePath> [-r=<n>] [-o]");
            return false;
        }
        return true;	
    }
}

PARSER_END(jmm)

SKIP :
{
    " " | "\t" | "\n" | "\r"
    /* Comments */
    | < "//" (~["\r", "\n"])* >
    | < "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/" >
}

TOKEN :
{
//   < OP :
//       "&&"
//     | "<"
//     | "+"
//     | "-"
//     | "*"
//     | "/" >
< AND_OP : "&&" >
| < LT_OP : "<" >
| < PLUS_OP : "+" >
| < MINUS_OP : "-" >
| < TIMES_OP : "*" >
| < DIVIDE_OP : "/" >
| < NOT_OP : "!" >
| < WHILE : "while" >
| < IF : "if" >
| < ELSE : "else" >
| < ASSIGN : "=" >
| < ASPA : "\"" >
| < LPAR : "(" >
| < RPAR : ")" >
| < DOT : "." >
| < LENGTH : "length" >
| < VIRG : "," >
| < PVIRG : ";" >
| < LCHAVETA : "{" >
| < RCHAVETA : "}" >
| < LPARRETO : "[" >
| < RPARRETO : "]" >
| < EXTENDS : "extends" >
| < CLASS : "class" >
| < PUBLIC : "public" >
| < STATIC : "static" >
| < VOID : "void" >
| < MAIN : "main" >
| < INT : "int" >
| < BOOLEAN : "boolean" >
| < TRUE : "true" >
| < FALSE : "false" >
| < RETURN : "return" >
| < THIS : "this" >
| < NEW : "new" >
| < STRING : "String" >
}

TOKEN :
{
  < INTEGER : (<DIGIT>)+ >
| < IDENTIFIER : <LETTER> (<ALPHANUM>)* >

| < #LETTER : [ "$", "A"-"Z", "_", "a"-"z" ] >
| < #DIGIT : [ "0"-"9" ] >
| < #ALPHANUM : <LETTER> | <DIGIT> >
| < STRING_ASPAS : "\"" ([ "a"-"z", "A"-"Z", "0"-"9", ":", " ", "=" ])+ "\"" >
}



SimpleNode Program() : {}
{
    ClassDeclaration(){
        return jjtThis;
    }
}

void ClassDeclaration() : {}
{
    <CLASS> <IDENTIFIER> (<EXTENDS> <IDENTIFIER>)? <LCHAVETA> (
        VarDeclaration()
    )* (<PUBLIC> (
        MainDeclaration()
        | MethodDeclaration()
        )
    )* <RCHAVETA>
}

void VarDeclaration() : {}
{
    Type() <IDENTIFIER> <PVIRG>
}

void MainDeclaration() : {}
{
    <STATIC> <VOID> <MAIN> <LPAR> <STRING> <LPARRETO> <RPARRETO> <IDENTIFIER>
    <RPAR> <LCHAVETA> (VarDeclaration())* (Statement())* <RCHAVETA>
}

void MethodDeclaration() : {}
{
    Type() <IDENTIFIER> <LPAR> (
        Type() <IDENTIFIER> (
            <VIRG> Type() <IDENTIFIER>
        )*
    )? <RPAR> <LCHAVETA> (
        VarDeclaration()
    )* (
        Statement()
    )* <RETURN> Expression() <PVIRG> <RCHAVETA>
}

void Type() : {}
{
    <INT> (<LPARRETO> <RPARRETO>)?
    | <BOOLEAN>
    | <IDENTIFIER>
}

void Statement() : {}
{
    <LCHAVETA> (Statement())* <RCHAVETA>
    | <IF> <LPAR> Expression() <RPAR> Statement() <ELSE> Statement()
    | <WHILE> <LPAR> Expression() <RPAR> Statement()
    | Expression() <PVIRG>
    | <IDENTIFIER> (<ASSIGN> Expression() <PVIRG> | <LPARRETO> Expression() <RPARRETO> <ASSIGN> Expression() <PVIRG>)
}

void Expression() #void : {}
{
    Term1() (Operator_1())*
}

void Term1() #void : {}
{
    Term2() (Operator_2())*
}

void Term2() #void : {}
{
    Term3() (Operator_3())*
}

void Term3() #void : {}
{
    Term4() (Operator_4())*
}

void Term4() #void : {}
{
    <INTEGER> #INT
    | <TRUE> #TRUE
    | <FALSE> #FALSE
    | <IDENTIFIER> #IDENTIFIER
    | <THIS> #THIS
    | <NEW> (<INT> <LPARRETO> Expression() <RPARRETO> | <IDENTIFIER> <LPAR> <RPAR>) #NEW
    | <NOT_OP> Expression() #NOT
    | <LPAR> Expression() <RPAR>
}

void Operator_1() #void : {}
{
    <AND_OP> Term1() #AND(2)
}

void Operator_2() #void : {}
{
    <LT_OP> Term2() #LT(2)
}

void Operator_3() #void : {}
{
    <PLUS_OP> Term3() #ADD(2)
    | <MINUS_OP> Term3() #SUB(2)
}

void Operator_4() #void : {}
{
    <TIMES_OP> Term4() #MUL(2)
    | <DIVIDE_OP> Term4() #DIV(2)
}

void Expression6() : {}
{
    <LPARRETO> Expression() <RPARRETO>
    | <DOT> (<LENGTH> | <IDENTIFIER> <LPAR> (
        Expression() (
            <VIRG> Expression()
        )*
    )? <RPAR>)
}